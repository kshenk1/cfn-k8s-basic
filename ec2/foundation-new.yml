AWSTemplateFormatVersion: '2010-09-09'
Description:  This template deploys a VPC, a public subnet, IGW and NAT gw,
  routes, and then 3 k8s nodes (1 master, 2 worker nodes), bootstrapping
  cfn-init, kubeadm, kubelet, kubectl and trying to make everything play nice.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: ks-k8s

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  AMIID:
    Description: The AMI Id to use for instances
    Type: String
    Default: ami-03e04f17b54574d5f
  KeyName:
    Description: The keypair name to use
    Type: String
    Default: ks-testing

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  KubeSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: kube-group
      GroupName: kube-group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  k8sLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        InstanceType: t3.xlarge
        ImageId: !Ref AMIID
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref KubeSecGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Env
                Value: Dev

  k8sMasterInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          fullSetup:
          - Install
          - doCFNHup
        Install:
          packages:
            apt:
              kubeadm: []
              kubectl: []
              kubelet: []
              docker.io: []
          services:
            systemd:
              kubelet:
                enabled: 'true'
                ensureRunning: 'true'
        doCFNHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.k8sMasterInstance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource k8sMasterInstance --configset fullSetup --region ${AWS::Region}
                runas=root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref k8sLaunchTemplate
        Version: !GetAtt k8sLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: k8s-master
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get upgrade -y
            apt-get install -y python-setuptools
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            python -m easy_install aws-cfn-bootstrap-latest.tar.gz
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource k8sMasterInstance --configsets fullSetup --region ${AWS::Region}
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource k8sMasterInstance --region ${AWS::Region}

  k8sNodeInstance1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          fullSetup:
          - Install
          - doCFNHup
        Install:
          packages:
            apt:
              kubeadm: []
              kubectl: []
              kubelet: []
              docker.io: []
          services:
            systemd:
              kubelet:
                enabled: 'true'
                ensureRunning: 'true'
        doCFNHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.k8sNodeInstance1.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource k8sNodeInstance1 --configset fullSetup --region ${AWS::Region}
                runas=root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref k8sLaunchTemplate
        Version: !GetAtt k8sLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: k8s-node-00
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get upgrade -y
            apt-get install -y python-setuptools
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            python -m easy_install aws-cfn-bootstrap-latest.tar.gz
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource k8sNodeInstance1 --configsets fullSetup --region ${AWS::Region}
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource k8sNodeInstance1 --region ${AWS::Region}

  k8sNodeInstance2:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          fullSetup:
          - Install
          - doCFNHup
        Install:
          packages:
            apt:
              kubeadm: []
              kubectl: []
              kubelet: []
              docker.io: []
          services:
            systemd:
              kubelet:
                enabled: 'true'
                ensureRunning: 'true'
        doCFNHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.k8sNodeInstance2.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource k8sNodeInstance2 --configset fullSetup --region ${AWS::Region}
                runas=root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref k8sLaunchTemplate
        Version: !GetAtt k8sLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: k8s-node-01
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get upgrade -y
            apt-get install -y python-setuptools
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            python -m easy_install aws-cfn-bootstrap-latest.tar.gz
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource k8sNodeInstance2 --configsets fullSetup --region ${AWS::Region}
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource k8sNodeInstance2 --region ${AWS::Region}


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
